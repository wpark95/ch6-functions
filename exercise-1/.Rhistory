# Create a variable `my_name` that contains your name
my_name <- "Won Gyun Park"
# Create a variable `name_length` that holds how many letters (including spaces)
# are in your name (use the `nchar()` function)
nchar <- my_name
my_name <- "Won Gyun Park"
nchar <- my_name
nchar(my_name)
name_length <- nchar(my_name)
name_length
now_doing <- paste(my_name, "is programming!")
now_doing
toupper(now_doing)
fav_1 <- 33
fav_2 <- 7
fav_1 / sqrt(201)
fav_2 / sqrt(201)
Original_Variable <- (fav_1 / sqrt(201), fav_2 / sqrt(201))
Original_Variable <- [fav_1 / sqrt(201), fav_2 / sqrt(201)]
styler:::style_active_file()
styler:::style_active_file()
fav_1 <- fav_1 / sqrt(201)
fav_2 <- fav_2 / sqrt(201)
fav_1
raw_sum <- sum(fav_1, fav_2)
round_sum <- round(raw_sum, 1)
raw_sum
round_sum
round_1 <- round(fav_1)
round_1 <- round(fav_1, 1)
round_1
round_2 <- round(fav_2, 1)
sum_round <- sum(round_1, round_2)
round_sum
sum_round
?max
max (round_sum, sum_round)
max (round_sum, fav_1)
max (round_sum)
max (sum_round)
max (fav_1)
lyric <- "I like to eat apples and bananas"
intro <- subtr(lyric)
intro <- substr(lyric, 1, 13)
intro <- substr(lyric, 1, 13)
lyric <- "I like to eat apples and bananas"
intro <- substr(lyric, 1, 13)
intro
fruits <- substr(lyric, 15, nchar(lyric))
fruits
fruits_e <- gsub("a", "ee", fruits)
fruits_e
fruits_o <- gsub("a", "o", fruits)
fruits_o
print(paste(intro, fruits_e))
print(paste(intro, fruits_o))
value = 3
ten <- add_three(7)
add_three <- function(value) {
value = 3
}
value = 3 #return the result
add_three <- function(value) {
value = 3 #return the result
}
ten <- add_three(7)
meters
imperial_to_metric <- function(feet, inches) {
total.inches <- feet*12 + inches
meters <- total.inches * 0.0254
meters
}
imperial_to_metric <- function(feet, inches) {
total.inches <- feet*12 + inches
meters <- total.inches * 0.0254
meters
}
height_in_meters <- imperial_to_metric(5.10)
height_in_meters <- imperial_to_metric(5)
# Exercise 3: writing and executing functions
# Define a function `add_three` that takes a single argument and
# returns a value 3 greater than the input
add_three <- function(value) {
value = 3 #return the result
}
# Create a variable `ten` that is the result of passing 7 to your `add_three`
# function
ten <- add_three(7)
# Define a function `imperial_to_metric` that takes in two arguments: a number
# of feet and a number of inches
# The function should return the equivalent length in meters
imperial_to_metric <- function(feet, inches) {
total.inches <- feet*12 + inches
meters <- total.inches * 0.0254
meters
}
# Create a variable `height_in_meters` by passing your height in imperial to the
# `imperial_to_metric` function
height_in_meters <- imperial_to_metric(5)
height_in_meters <- imperial_to_metric(5, 11)
height_in_meters
height_in_meters <- imperial_to_metric(5, 10)
height_in_meters
all_numbers <- c(first_ten, next_ten)
all_numbers <- paste(first_ten, next_ten)
first_ten <- (10:20)
# Create a vector `next_ten` that has the values 21 through 30 in it (using the
# seq() function)
next_ten <- seq(21, 30)
# Create a vector `all_numbers` by combining the previous two vectors
all_numbers <- paste(first_ten, next_ten)
all_numbers <- c(first_ten, next_ten)
all_numbers
styler:::style_active_file()
# Create a vector `better_meals` that is all your meals, but with pizza!
itmes <- lapply(meals, length)
# Create a list that has the number of items you ate for each meal
# Hint: use the `lappy()` function to apply the `length()` function to each item
items <- lapply(meals, length)
# Create a vector `better_meals` that is all your meals, but with pizza!
better_meals <- lapply(meals, add_pizza)
better_meals
# Create a vector `better_meals` that is all your meals, but with pizza!
better_meals <- lapply(meals, add_pizza)
# Write a function `add_pizza` that adds pizza to a given meal vector, and
# returns the pizza-fied vector
add_pizza <- function(meal, food) {
meal <- c(meal, "pizza")
meal # return the new vector
}
# Create a vector `better_meals` that is all your meals, but with pizza!
better_meals <- lapply(meals, add_pizza)
# Create a vector `my_breakfast` of everything you ate for breakfast
my_breakfast <- c("water", "leftover_chipotle_from_last_night", "orange_juice")
# Exercise 1: creating and accessing lists
# Create a vector `my_breakfast` of everything you ate for breakfast
my_breakfast <- c("water", "leftover_chipotle_from_last_night", "orange_juice")
# Create a vector `my_lunch` of everything you ate (or will eat) for lunch
my_lunch <- c("bacon", "pasta", "banana_chips")
# Create a list `meals` that has contains your breakfast and lunc
meals <- list(breakfast = my_breakfast, lunch = my_lunch)
# Add a "dinner" element to your `meals` list that has what you plan to eat
# for dinner
meals$dinner <- c("chicken")
# Use dollar notation to extract your `dinner` element from your list
# and save it in a vector called 'dinner'
dinner <- meals$dinner
# Use double-bracket notation to extract your `lunch` element from your list
# and save it in your list as the element at index 5 (no reason beyond practice)
meals[[5]] <- meals[["lunch"]]
# Use single-bracket notation to extract your breakfast and lunch from your list
# and save them to a list called `early_meals`
early_meals <- meals[1:2]
### Challenge ###
# Create a list that has the number of items you ate for each meal
# Hint: use the `lappy()` function to apply the `length()` function to each item
items <- lapply(meals, length)
# Write a function `add_pizza` that adds pizza to a given meal vector, and
# returns the pizza-fied vector
add_pizza <- function(meal, food) {
meal <- c(meal, "pizza")
meal # return the new vector
}
# Create a vector `better_meals` that is all your meals, but with pizza!
better_meals <- lapply(meals, add_pizza)
# Exercise 1: creating and accessing lists
# Create a vector `my_breakfast` of everything you ate for breakfast
my_breakfast <- c("water", "leftover_chipotle_from_last_night", "orange_juice")
# Create a vector `my_lunch` of everything you ate (or will eat) for lunch
my_lunch <- c("bacon", "pasta", "banana_chips")
# Create a list `meals` that has contains your breakfast and lunc
meals <- list(breakfast = my_breakfast, lunch = my_lunch)
# Add a "dinner" element to your `meals` list that has what you plan to eat
# for dinner
meals$dinner <- c("chicken")
# Use dollar notation to extract your `dinner` element from your list
# and save it in a vector called 'dinner'
dinner <- meals$dinner
# Use double-bracket notation to extract your `lunch` element from your list
# and save it in your list as the element at index 5 (no reason beyond practice)
meals[[5]] <- meals[["lunch"]]
# Use single-bracket notation to extract your breakfast and lunch from your list
# and save them to a list called `early_meals`
early_meals <- meals[1:2]
### Challenge ###
# Create a list that has the number of items you ate for each meal
# Hint: use the `lappy()` function to apply the `length()` function to each item
items <- lapply(meals, length)
# Write a function `add_pizza` that adds pizza to a given meal vector, and
# returns the pizza-fied vector
add_pizza <- function(meal, food) {
meal <- c(meal, "pizza")
meal # return the new vector
}
# Create a vector `better_meals` that is all your meals, but with pizza!
better_meals <- lapply(meals, add_pizza)
better_meals
# Exercise 1: creating data frames
# Create a vector of the number of points the Seahawks scored in the first 4 games
# of the season (google "Seahawks" for the scores!)
points <- c(9, 12, 27, 46)
# Create a vector of the number of points the Seahwaks have allowed to be scored
# against them in each of the first 4 games of the season
points_allowed <- c(17, 9, 33, 18)
# Combine your two vectors into a dataframe called `games`
games <- data.frame(points, points_allowed)
# Create a new column "diff" that is the difference in points between the teams
# Hint: recall the syntax for assigning new elements (which in this case will be
# a vector) to a list!
games$diff <- points - points_allowed
# Create a new column "won" which is TRUE if the Seahawks won the game
games$won <- games$diff > 0
# Create a vector of the opponent names corresponding to the games played
opponents <- c("Dolphins", "Rams", "49ers", "Jets")
# Assign your dataframe rownames of their opponents
# View your data frame to see how it has changed!
games$diff <- games$points - games$points_allowed
View(games)
rownames(games) <- opponents
View(games)
